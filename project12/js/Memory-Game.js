// ÈÅäÊà≤ËÆäÊï∏
let cards = [];
let flippedCards = [];
let matchedPairs = 0;
let moves = 0;
let timeLeft = 60;
let gameTimer;
let canFlip = true;
let currentDifficulty = 'easy';
let currentTheme = 'fruit';
let gridSize = 4;
let gamePaused = false;
let currentScore = 0;
let highScore = localStorage.getItem('highScore') || 0;
// ÂÅáË®≠ÊàëÂÄëÊúâ‰∏ÄÂÄãË®àÊôÇÂô®
let timer;
let timeLimit = 60; // 60ÁßíÁöÑÊôÇÈñìÈôêÂà∂
let score = 0;
let difficulty = "ÊôÆÈÄö"; // ÂÅáË®≠Èõ£Â∫¶ÊòØÊôÆÈÄö
let targetScore = 100; // ÂÅáË®≠ÁõÆÊ®ôÂàÜÊï∏ÊòØ100
let totalPairs = 0;
// === Êñ∞Â¢ûÔºöÁ¥ÄÈåÑÈÅäÊà≤ÈñãÂßãËàáÁµêÊùüÊôÇÈñì ===
let gameStartTimestamp = null;
let gameEndTimestamp = null;

// ÈÅäÊà≤Ë®≠ÁΩÆ
const gameSettings = {
    easy: {
        gridSize: 4,
        timeLimit: 60,
        baseScore: 20
    },
    normal: {
        gridSize: 4,
        timeLimit: 120,
        baseScore: 50
    },
    hard: {
        gridSize: 8,  // 8Âàó
        timeLimit: 180,
        baseScore: 100
    }
};

// ‰ΩøÁî®ÂæûPHPÂÇ≥‰æÜÁöÑË≥áÊñôÊõ¥Êñ∞Ë®≠ÂÆö
difficulties.forEach(diff => {
    if (gameSettings[diff.difficulty_level]) {
        gameSettings[diff.difficulty_level] = {
            ...gameSettings[diff.difficulty_level],
            gridSize: diff.color_count,
            timeLimit: diff.time_limit,
            baseScore: diff.score_multiplier
        };
    }
});

// ‰ΩøÁî®ÂæûPHPÂÇ≥‰æÜÁöÑÈ°èËâ≤Ë®≠ÂÆö
const themeColors = {};
colors.forEach(color => {
    if (!themeColors[color.difficulty_level]) {
        themeColors[color.difficulty_level] = {};
    }
    themeColors[color.difficulty_level][color.color_name] = color.color_code;
});
 
// Âç°ÁâáÁ¨¶Ëôü
const symbols = {
    fruit: ['üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'üçà', 'üçí', 'üçë', 'ü•≠',
           'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶', 'ü•¨', 'ü•í', 'üå∂Ô∏è', 'üåΩ', 'ü•ï'],
    animal: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ',
            'üê∑', 'üê∏', 'üêµ', 'üêî', 'üêß', 'üê¶', 'ü¶Ü', 'ü¶Ö', 'ü¶â', 'ü¶á', 'üê∫', 'üêó'],
    daily: ['‚åö', 'üì±', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è', 'üóúÔ∏è', 'üíΩ', 'üíæ',
           'üíø', 'üìÄ', 'üìº', 'üì∑', 'üìπ', 'üé•', 'üìΩÔ∏è', 'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†'],
    vegetable: ['ü•¨', 'ü•¶', 'ü•í', 'üå∂Ô∏è', 'üåΩ', 'ü•ï', 'üßÑ', 'üßÖ', 'ü•î', 'üç†', 'ü•ê', 'ü•Ø',
               'ü•ñ', 'ü•®', 'üßÄ', 'ü•ö', 'üç≥', 'üßà', 'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ']
};
 
// È°ØÁ§∫ÈÅäÊà≤Ë™™ÊòéÂΩàÁ™ó
function showHelp() {
    document.getElementById('help-modal').classList.remove('hidden');
}
 
// ÈÅ∏Êìá‰∏ªÈ°å
function selectTheme(theme) {
    currentTheme = theme;
    const themeData = themes.find(t => t.theme_name === theme);
    const themeStyle = JSON.parse(themeData.theme_style);
   
    // Êõ¥Êñ∞Âç°ÁâáÈ°èËâ≤
    document.documentElement.style.setProperty('--card-back-color', themeStyle.cardBack);
    document.documentElement.style.setProperty('--card-front-color', themeStyle.cardFront);
    document.documentElement.style.setProperty('--matched-color', themeStyle.matched);
    document.documentElement.style.setProperty('--background-color', themeStyle.background);
    document.documentElement.style.setProperty('--container-color', themeStyle.container);
   
    // Êõ¥Êñ∞ÊåâÈàïÁãÄÊÖã
    document.querySelectorAll('.theme-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.${theme}-theme`).classList.add('active');
 
    // Èö±Ëóè‰∏ªÈ°åÈÅ∏ÊìáÔºåÈ°ØÁ§∫Èõ£Â∫¶ÈÅ∏Êìá
    document.getElementById('theme-modal').classList.add('hidden');
    document.getElementById('difficulty-modal').classList.remove('hidden');
}
 
// ÈÅ∏ÊìáÈõ£Â∫¶
function selectDifficulty(difficulty) {
    currentDifficulty = difficulty;
    const settings = gameSettings[difficulty];
    gridSize = settings.gridSize;
    timeLeft = settings.timeLimit;
    document.getElementById('timer').textContent = timeLeft;
    document.getElementById('difficulty-modal').classList.add('hidden');
    document.getElementById('game-container').classList.remove('hidden');
    // === Êñ∞Â¢û ===
    gameStartTimestamp = Date.now();
    // ===========
    initializeGame();
}
 
// ÂàùÂßãÂåñÈÅäÊà≤
function initializeGame() {
    // ÈáçÁΩÆÈÅäÊà≤ÁãÄÊÖã
    cards = [];
    flippedCards = [];
    matchedPairs = 0;
    moves = 0;
    canFlip = true;
    document.getElementById('moves').textContent = '0';
   
    // Ê∏ÖÁ©∫ÈÅäÊà≤Êùø
    const gameBoard = document.getElementById('game-board');
    gameBoard.innerHTML = '';
   
    // Ë®≠ÁΩÆÁ∂≤Ê†º
    let cols, rows;
    if (currentDifficulty === 'easy') {
        cols = 4;
        rows = 3;
    } else if (currentDifficulty === 'hard') {
        cols = 8;  // 8Âàó
        rows = 4;  // 4Ë°å
    } else {
        cols = 4;
        rows = 4;
    }
    
    // Ë®≠ÂÆöÁ∂≤Ê†º
    gameBoard.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;
    gameBoard.style.gridTemplateRows = `repeat(${rows}, 1fr)`;
    
    // ÂâµÂª∫Âç°ÁâáÂ∞ç
    const totalPairs = (cols * rows) / 2;
    const selectedSymbols = symbols[currentTheme].slice(0, totalPairs);
    const cardSymbols = [...selectedSymbols, ...selectedSymbols];
    shuffleArray(cardSymbols);

    // Ê∏ÖÁ©∫Âç°ÁâáÈô£Âàó
    cards = [];
    // Áî¢ÁîüÂç°Áâá
    cardSymbols.forEach((symbol, index) => {
        const card = createCard(symbol, index);
        cards.push(card);
        gameBoard.appendChild(card);
    });

    // Áî¢ÁîüÂç°ÁâáÂæåÔºåÁõ¥Êé•Áî® JS Ë®≠ÂÆöÊØèÂºµÂç°ÁâáÁÇ∫Ê≠£ÊñπÂΩ¢
    let cardSize, fontSize;
    if (currentDifficulty === 'easy') {
        cardSize = '120px';
        fontSize = '2.8rem';
    } else if (currentDifficulty === 'hard') {
        cardSize = '50px';  // ÊîπÂ∞è‰∏ÄÈªûÔºåÂõ†ÁÇ∫Êúâ8Âàó
        fontSize = '1.2rem';
    } else {
        cardSize = '80px';
        fontSize = '2rem';
    }
    const allCards = document.querySelectorAll('.card');
    allCards.forEach(card => {
        card.style.maxWidth = cardSize;
        card.style.width = cardSize;
        card.style.height = cardSize;
        card.style.paddingBottom = '0';
    });
    const allFronts = document.querySelectorAll('.card-front, .card-back');
    allFronts.forEach(face => {
        face.style.fontSize = fontSize;
    });

    // Ë®≠ÂÆö gameBoard ÂØ¨È´ò
    gameBoard.style.width = `calc(${cardSize} * ${cols})`;
    gameBoard.style.height = `calc(${cardSize} * ${rows})`;
    gameBoard.style.marginLeft = 'auto';
    gameBoard.style.marginRight = 'auto';
    gameBoard.style.display = 'grid';
   
    // Êñ∞Â¢û:
    setTimeout(adjustGameBoardSize, 0);
   
    // ÈñãÂßãË®àÊôÇ
    startTimer();
   
    // È°ØÁ§∫ÊéßÂà∂ÊåâÈàï
    document.getElementById('pauseBtn').classList.remove('hidden');
    document.getElementById('endBtn').classList.remove('hidden');
    document.getElementById('resetBtn').classList.remove('hidden');
    document.getElementById('resumeBtn').classList.add('hidden');
}
 
// ÂâµÂª∫Âç°Áâá
function createCard(symbol, index) {
    const card = document.createElement('div');
    card.className = 'card';
    card.innerHTML = `
        <div class="card-front">${symbol}</div>
        <div class="card-back"></div>
    `;
    card.dataset.symbol = symbol;
    card.dataset.index = index;
   
    card.addEventListener('click', () => flipCard(card));
    return card;
}
 
// ÁøªÁâå
function flipCard(card) {
    if (!canFlip || card.classList.contains('flipped') || flippedCards.length >= 2) return;
   
    card.classList.add('flipped');
    flippedCards.push(card);
   
    if (flippedCards.length === 2) {
        moves++;
        document.getElementById('moves').textContent = moves;
        canFlip = false;
       
        setTimeout(checkMatch, 1000);
    }
}
 
// Ê™¢Êü•ÈÖçÂ∞ç
function checkMatch() {
    const [card1, card2] = flippedCards;
    const match = card1.dataset.symbol === card2.dataset.symbol;
   
    if (match) {
        card1.classList.add('matched');
        card2.classList.add('matched');
        matchedPairs++;

        // Ë®àÁÆóÁ∏ΩÈÖçÂ∞çÊï∏
        let totalPairs;
        if (currentDifficulty === 'easy') {
            totalPairs = 6; // 4x3 Á∂≤Ê†ºÔºåÂÖ±6Â∞ç
        } else if (currentDifficulty === 'normal') {
            totalPairs = 8; // 4x4 Á∂≤Ê†ºÔºåÂÖ±8Â∞ç
        } else {
            totalPairs = 16; // 8x4 Á∂≤Ê†ºÔºåÂÖ±16Â∞ç
        }

        // Ê™¢Êü•ÊòØÂê¶ÊâÄÊúâÈÖçÂ∞çÈÉΩÂÆåÊàê
        if (matchedPairs === totalPairs) {
            clearInterval(gameTimer);
            canFlip = false;
            showGameOver(true);
            return;
        }
    } else {
        card1.classList.remove('flipped');
        card2.classList.remove('flipped');
    }
   
    flippedCards = [];
    canFlip = true;
}
 
// ÈñãÂßãË®àÊôÇ
function startTimer() {
    clearInterval(gameTimer);
    gameTimer = setInterval(() => {
        timeLeft--;
        document.getElementById('timer').textContent = timeLeft;
       
        if (timeLeft <= 0) {
            clearInterval(gameTimer);
            canFlip = false;
            showGameOver(false);
        }
    }, 1000);
}
 
// ÈáçÁΩÆÈÅäÊà≤
function resetGame() {
    clearInterval(gameTimer);
    gamePaused = false;
    currentScore = 0;
    updateScoreDisplay();

    // Èö±ËóèÊâÄÊúâ modal
    document.querySelectorAll('.modal').forEach(m => m.classList.add('hidden'));
    document.getElementById('game-container').classList.add('hidden');
    document.getElementById('theme-modal').classList.remove('hidden');
    document.getElementById('difficulty-modal').classList.add('hidden');

    document.getElementById('game-board').innerHTML = '';
    document.getElementById('moves').textContent = '0';
    document.getElementById('timer').textContent = gameSettings[currentDifficulty].timeLimit;

    document.getElementById('pauseBtn').classList.add('hidden');
    document.getElementById('resumeBtn').classList.add('hidden');
    document.getElementById('endBtn').classList.add('hidden');
    document.getElementById('resetBtn').classList.add('hidden');
}
 
// Ê¥óÁâåÂáΩÊï∏
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}
 
// Êö´ÂÅúÈÅäÊà≤
function pauseGame() {
    if (!gamePaused) {
        gamePaused = true;
        clearInterval(gameTimer);
        canFlip = false;
        document.getElementById('pauseBtn').classList.add('hidden');
        document.getElementById('resumeBtn').classList.remove('hidden');
    }
}
 
// ÁπºÁ∫åÈÅäÊà≤
function resumeGame() {
    if (gamePaused) {
        gamePaused = false;
        canFlip = true;
        startTimer();
        document.getElementById('pauseBtn').classList.remove('hidden');
        document.getElementById('resumeBtn').classList.add('hidden');
    }
}
 
// ÁµêÊùüÈÅäÊà≤
function endGame() {
    clearInterval(gameTimer);
    canFlip = false;
    showGameOver(false);
}
 
// Á∂ÅÂÆöÊåâÈàï‰∫ã‰ª∂
document.getElementById('pauseBtn').onclick = pauseGame;
document.getElementById('resumeBtn').onclick = resumeGame;
document.getElementById('endBtn').onclick = endGame;
document.getElementById('resetBtn').onclick = resetGame;
 
// Êõ¥Êñ∞ÂàÜÊï∏È°ØÁ§∫
function updateScoreDisplay() {
    if (document.getElementById('current-score')) {
        document.getElementById('current-score').textContent = currentScore;
    }
    if (document.getElementById('high-score')) {
        document.getElementById('high-score').textContent = highScore;
    }
}
 
// Ë®àÁÆóÂàÜÊï∏
function calculateScore() {
    // Ê†πÊìöÈõ£Â∫¶Áµ¶‰∫àÂõ∫ÂÆöÂàÜÊï∏
    switch(currentDifficulty) {
        case 'easy':
            return 20;  // Á∞°ÂñÆÈÅéÈóú+20
        case 'normal':
            return 50;  // ÊôÆÈÄö+50
        case 'hard':
            return 100; // Âõ∞Èõ£+100
        default:
            return 0;
    }
}
 
// ÂÑ≤Â≠òÈÅäÊà≤ÁµêÊûú
async function saveGameResult(isWin, score, playTime) {
    try {
        const response = await fetch('Memory-Game.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                member_id: getCurrentMemberId(),
                difficulty: currentDifficulty,
                status: isWin ? 'completed' : 'failed',
                score: score,
                play_time: playTime
            })
        });
        const result = await response.json();
        if (!result.success) {
            console.error('ÂÑ≤Â≠òÈÅäÊà≤ÁµêÊûúÂ§±Êïó:', result.message);
        }
    } catch (error) {
        console.error('ÂÑ≤Â≠òÈÅäÊà≤ÁµêÊûúÊôÇÁôºÁîüÈåØË™§:', error);
    }
}
 
// Áç≤ÂèñÁï∂ÂâçÊúÉÂì°ID
function getCurrentMemberId() {
    // ÈÄôË£°ÈúÄË¶ÅÂØ¶‰ΩúÁç≤ÂèñÁï∂ÂâçÁôªÂÖ•ÊúÉÂì°IDÁöÑÈÇèËºØ
    // ÂèØ‰ª•Âæû session Êàñ localStorage ‰∏≠Áç≤Âèñ
    return localStorage.getItem('member_id') || null;
}
 
// È°ØÁ§∫ÈÅäÊà≤ÁµêÊùüÂΩàÁ™ó
function showGameOver(isWin) {
    gameEndTimestamp = Date.now();
    let playTime = 0;
    if (gameStartTimestamp && gameEndTimestamp) {
        playTime = Math.round((gameEndTimestamp - gameStartTimestamp) / 1000); // ÂñÆ‰ΩçÔºöÁßí
    }
    const gameOverModal = document.getElementById('game-over-modal');
    const gameOverTitle = document.getElementById('game-over-title');
    const resultMessage = document.getElementById('result-message');
 
    // Áç≤ÂèñÈõ£Â∫¶‰∏≠ÊñáÂêçÁ®±
    const difficultyNames = {
        'easy': 'Á∞°ÂñÆ',
        'normal': 'ÊôÆÈÄö',
        'hard': 'Âõ∞Èõ£'
    };
 
    // Ë®≠ÁΩÆÊ®ôÈ°å
    gameOverTitle.textContent = isWin ? 'üéâ ÊÅ≠ÂñúÁ†¥ÈóúÔºÅ' : '‚è∞ ÈÅäÊà≤Â§±Êïó';
   
    // Ë®≠ÁΩÆÁµêÊûúË®äÊÅØ
    let score = 0;
    if (isWin) {
        score = calculateScore();
        resultMessage.innerHTML = `Èõ£Â∫¶ : ${difficultyNames[currentDifficulty]}<br><br>Áç≤ÂæóÂàÜÊï∏ : ${score}<br><br>ÈÅäÊà≤ÊôÇÈñì : ${playTime}Áßí`;
    } else {
        resultMessage.innerHTML = `Èõ£Â∫¶ : ${difficultyNames[currentDifficulty]}<br><br>Êú™Âú®ÊôÇÈñìÂÖßÈÅîÊàêÂàÜÊï∏`;
    }
 
    // ÂÑ≤Â≠òÈÅäÊà≤ÁµêÊûúÔºàÂ∏∂ÂàÜÊï∏Ëàá play_timeÔºâ
    saveGameResult(isWin, score, playTime);
 
    // Á´ãÂç≥È°ØÁ§∫ÈÅäÊà≤ÁµêÊùüË¶ñÁ™ó
    gameOverModal.classList.remove('hidden');
}
 
// È°ØÁ§∫‰∏ªÈÅ∏ÂñÆ
function showMainMenu() {
    document.getElementById('game-container').classList.add('hidden');
    document.getElementById('theme-modal').classList.remove('hidden');
    document.getElementById('difficulty-modal').classList.add('hidden');
    document.querySelector('.modal')?.remove();
}
 
// ÈáçÊñ∞ÈñãÂßãÈÅäÊà≤
function replayGame() {
    // ÈáçÁΩÆÈÅäÊà≤ÁãÄÊÖã
    cards = [];
    flippedCards = [];
    matchedPairs = 0;
    moves = 0;
    timeLeft = gameSettings[currentDifficulty].timeLimit;
    canFlip = true;
    gamePaused = false;
   
    // Ê∏ÖÈô§Ë®àÊôÇÂô®
    clearInterval(gameTimer);
   
    // ÈáçÁΩÆÈ°ØÁ§∫
    document.getElementById('moves').textContent = '0';
    document.getElementById('timer').textContent = timeLeft;
   
    // Ê∏ÖÁ©∫ÈÅäÊà≤Êùø
    const gameBoard = document.getElementById('game-board');
    gameBoard.innerHTML = '';
   
    // Èö±ËóèÈÅäÊà≤ÁµêÊùüË¶ñÁ™ó
    const gameOverModal = document.getElementById('game-over-modal');
    gameOverModal.classList.add('hidden');
   
    // È°ØÁ§∫‰∏ªÈ°åÈÅ∏ÊìáË¶ñÁ™ó
    document.getElementById('theme-modal').classList.remove('hidden');
    document.getElementById('difficulty-modal').classList.add('hidden');
    document.getElementById('game-container').classList.add('hidden');
   
    // ÈáçÁΩÆÊéßÂà∂ÊåâÈàïÁãÄÊÖã
    document.getElementById('pauseBtn').classList.add('hidden');
    document.getElementById('resumeBtn').classList.add('hidden');
    document.getElementById('endBtn').classList.add('hidden');
    document.getElementById('resetBtn').classList.add('hidden');
}
 
// ËøîÂõû‰∏ªÈÅ∏ÂñÆ
function returnToMain() {
    window.location.href = 'index.php';
}
 
// È†ÅÈù¢ËºâÂÖ•ÊôÇÂàùÂßãÂåñ
window.onload = function() {
    updateScoreDisplay();
    document.getElementById('theme-modal').classList.remove('hidden');
    document.getElementById('difficulty-modal').classList.add('hidden');
    document.getElementById('game-container').classList.add('hidden');
};

window.selectTheme = selectTheme;
window.selectDifficulty = selectDifficulty;
window.showHelp = showHelp;
window.replayGame = replayGame;
window.returnToMain = returnToMain;
window.resetGame = resetGame;

function closeHelpModal() {
    document.getElementById('help-modal').classList.add('hidden');
}
window.closeHelpModal = closeHelpModal;

function adjustGameBoardSize() {
    const container = document.querySelector('.game-container');
    const board = document.getElementById('game-board');
    if (!container || !board) return;

    // ËÆìÁ∞°ÂñÆÊ®°ÂºèÁî® 4x4 ÁöÑÂØ¨Â∫¶Ë®àÁÆóÂç°ÁâáÂ§ßÂ∞èÔºårows Ë®≠ 3Ôºåcols Ë®≠ 4
    let cols, rows, calcCols, calcRows;
    if (board.classList.contains('hard-mode') || window.currentDifficulty === 'hard') {
        cols = 8; rows = 4; calcCols = 8; calcRows = 4;
    } else if (board.classList.contains('easy-mode') || window.currentDifficulty === 'easy') {
        cols = 4; rows = 3; calcCols = 4; calcRows = 4;
    } else {
        cols = 4; rows = 4; calcCols = 4; calcRows = 4;
    }
    const gap = 6; // px
    let maxCardSize;
    if (cols === 4 && rows === 3) {
        maxCardSize = 120;
    } else {
        maxCardSize = 90;
    }
    const containerWidth = container.clientWidth;
    const maxBoardWidth = Math.min(containerWidth, calcCols * maxCardSize + (calcCols - 1) * gap);
    const cardSize = Math.floor((maxBoardWidth - (calcCols - 1) * gap) / calcCols);

    // Ë®≠ÂÆö .game-board ÂØ¨È´ò
    board.style.width = (cardSize * cols + (cols - 1) * gap) + 'px';
    board.style.height = 'auto';

    // Ë®≠ÂÆöÊØèÂºµÂç°ÁâáÁöÑÂØ¨È´ò
    document.querySelectorAll('.card').forEach(card => {
        card.style.width = card.style.height = cardSize + 'px';
        card.style.maxWidth = card.style.maxHeight = cardSize + 'px';
        card.style.paddingBottom = '0';
    });
    // ÂúñÁ§∫Â§ßÂ∞èËá™ÂãïË™øÊï¥
    const fontSize = cardSize * 0.95;
    document.querySelectorAll('.card-front, .card-back').forEach(face => {
        face.style.fontSize = fontSize + 'px';
    });

    // ËÆì .game-container ÂØ¨Â∫¶Ëá™ÂãïÊØî .game-board Â§ß 600pxÔºåÊ∞∏ÈÅ†ÂåÖ‰ΩèÊâÄÊúâÁâå
    const boardWidth = board.offsetWidth;
    container.style.width = (boardWidth + 600) + 'px';
}

// Ë¶ñÁ™óÁ∏ÆÊîæÊôÇËá™ÂãïË™øÊï¥
window.addEventListener('resize', adjustGameBoardSize);

function showThemeModal() {
    document.getElementById('difficulty-modal').classList.add('hidden');
    document.getElementById('theme-modal').classList.remove('hidden');
}
window.showThemeModal = showThemeModal;